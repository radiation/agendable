services:
  postgres:
    image: postgres:13
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: user_db
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    networks:
      - postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d user_db"]
      start_period: 2.5s
      interval: 2.5s
      timeout: 15s
      retries: 5

  user-service:
    build:
      context: .
      dockerfile: user-service/Dockerfile
      args:
        PROJECT_NAME: user-service
    command: >
      /bin/bash -c "
        alembic upgrade head &&
        uvicorn app.main:app --host 0.0.0.0 --port ${USER_SERVICE_PORT} --reload
      "
    environment:
      - DATABASE_URL=${USER_DB_URL}
      - PYTHONPATH=/app/user-service:/app/common-lib/src
      - SERVICE_NAME=user-service
    env_file:
      - .env
    volumes:
      - ${USER_SERVICE_PATH}/app:/app/user-service/app
      - ${USER_SERVICE_PATH}/alembic:/app/user-service/alembic
      - ./common-lib:/app/common-lib
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - web
      - postgres

  meeting-service:
    build:
      context: .
      dockerfile: meeting-service/Dockerfile
      args:
        PROJECT_NAME: meeting-service
    command: >
      /bin/bash -c "
        alembic upgrade head &&
        uvicorn app.main:app --host 0.0.0.0 --port ${MEETING_SERVICE_PORT} --reload
      "
    environment:
      - DATABASE_URL=${MEETING_DB_URL}
      - PYTHONPATH=/app/meeting-service:/app/common-lib/src
      - SERVICE_NAME=meeting-service
    env_file:
      - .env
    volumes:
      - ${MEETING_SERVICE_PATH}/app:/app/meeting-service/app
      - ${MEETING_SERVICE_PATH}/alembic:/app/meeting-service/alembic
      - ./common-lib:/app/common-lib
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - web
      - postgres

  web-ui:
    build:
      context: ./web-ui
      dockerfile: Dockerfile
    ports:
      - "${WEB_UI_PORT}:${WEB_UI_PORT}"
    networks:
      - web

  redis:
    image: redis:latest
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    networks:
      - web

  kong:
    image: kong:latest
    build:
      context: ./kong
    command: >
      /bin/bash -c "
        kong migrations bootstrap;
        kong migrations up;
        kong start;
      "
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_PORT: ${POSTGRES_PORT}
      KONG_PG_USER: ${POSTGRES_USER}
      KONG_PG_PASSWORD: ${POSTGRES_PASSWORD}
      KONG_PG_DATABASE: kong_db
      KONG_PROXY_ACCESS_LOG: "/dev/stdout"
      KONG_ADMIN_ACCESS_LOG: "/dev/stdout"
      KONG_PROXY_ERROR_LOG: "/dev/stderr"
      KONG_ADMIN_ERROR_LOG: "/dev/stderr"
      KONG_ADMIN_LISTEN: '0.0.0.0:${KONG_ADMIN_PORT}'
      KONG_LOG_LEVEL: debug
    env_file:
      - .env
    ports:
      - "${KONG_PROXY_PORT}:${KONG_PROXY_PORT}"
      - "${KONG_PROXY_SSL_PORT}:${KONG_PROXY_SSL_PORT}"
      - "${KONG_ADMIN_PORT}:${KONG_ADMIN_PORT}"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - web
      - postgres

networks:
  postgres:
  web:

volumes:
  postgres_data:
