"""incremental updates

Revision ID: 53cc1a63e3db
Revises: 97f80507c587
Create Date: 2025-07-27 08:26:55.673462

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '53cc1a63e3db'
down_revision: Union[str, None] = '97f80507c587'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_recurrence_created_at'), table_name='recurrences')
    op.drop_index(op.f('ix_recurrence_rrule'), table_name='recurrences')
    op.drop_table('recurrences')
    op.drop_index(op.f('ix_meeting_completed'), table_name='meetings')
    op.drop_index(op.f('ix_meeting_start_date'), table_name='meetings')
    op.drop_index(op.f('ix_recurrence_id'), table_name='meetings')
    op.drop_table('meetings')
    op.drop_table('meeting_users')
    op.drop_index(op.f('ix_task_assignee_id'), table_name='tasks')
    op.drop_index(op.f('ix_task_completed'), table_name='tasks')
    op.drop_index(op.f('ix_task_due_date'), table_name='tasks')
    op.drop_table('tasks')
    op.drop_table('meeting_tasks')
    op.drop_table('users')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('first_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('last_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('meeting_tasks',
    sa.Column('meeting_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('task_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['meeting_id'], ['meetings.id'], name=op.f('meeting_tasks_meeting_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], name=op.f('meeting_tasks_task_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('meeting_id', 'task_id', name=op.f('meeting_tasks_pkey'))
    )
    op.create_table('tasks',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('assignee_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('due_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('completed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('completed_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('tasks_pkey'))
    )
    op.create_index(op.f('ix_task_due_date'), 'tasks', ['due_date'], unique=False)
    op.create_index(op.f('ix_task_completed'), 'tasks', ['completed'], unique=False)
    op.create_index(op.f('ix_task_assignee_id'), 'tasks', ['assignee_id'], unique=False)
    op.create_table('meeting_users',
    sa.Column('meeting_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['meeting_id'], ['meetings.id'], name=op.f('meeting_users_meeting_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('meeting_users_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('meeting_id', 'user_id', name=op.f('meeting_users_pkey'))
    )
    op.create_table('meetings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('recurrence_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('start_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('end_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('duration', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('location', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('notes', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('num_reschedules', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('reminder_sent', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('completed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['recurrence_id'], ['recurrences.id'], name=op.f('meetings_recurrence_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('meetings_pkey'))
    )
    op.create_index(op.f('ix_recurrence_id'), 'meetings', ['recurrence_id'], unique=False)
    op.create_index(op.f('ix_meeting_start_date'), 'meetings', ['start_date'], unique=False)
    op.create_index(op.f('ix_meeting_completed'), 'meetings', ['completed'], unique=False)
    op.create_table('recurrences',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('rrule', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('recurrences_pkey'))
    )
    op.create_index(op.f('ix_recurrence_rrule'), 'recurrences', ['rrule'], unique=False)
    op.create_index(op.f('ix_recurrence_created_at'), 'recurrences', ['created_at'], unique=False)
    # ### end Alembic commands ###
